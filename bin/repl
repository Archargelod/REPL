#!/bin/bash

COMMAND=$1
# TODO: Rename PARAM* or obtain the variables differently
PARAM1=$2
PARAM2=$3
SCRIPTPATH="$( cd "$(dirname "$0")" || exit ; pwd -P )"

# shellcheck source=./config
. "${SCRIPTPATH}/../config"
# shellcheck source=./language_support.sh
. "${SCRIPTPATH}/../language_support.sh"
# shellcheck source=./repl_modules.sh
. "${SCRIPTPATH}/../repl_modules.sh"


#######################################
# Checks the PATH for the given app (currently unused)
# Globals:
#   None
# Arguments:
#   $1 - Name of the bin to search for in PATH
# Returns:
#   None
#######################################
# repl_has() {
#   type "${1-}" > /dev/null 2>&1
# }

#######################################
# Update a line in the config file.
# Globals:
#   None
# Arguments:
#   $1 - Variable to update (e.g., "LAST_RUN=") [MUST include equals sign, no leading/trailing spaces]
#   $2 - Value to update variable with (e.g., "cpp" for LAST_RUN=) [no leading/trailing spaces]
# Returns:
#   None
#######################################
repl_update_config() {
  sed -i'' -e "s@^\($1\).*@\1\"$2\"@" "${SCRIPTPATH}/../config"
}

repl_config() {
  case "$PARAM1" in
  editor)
    repl_update_config "EDITOR=" "$PARAM2"
    ;;
  esac
}

repl_edit() {
  for lang in "${LANGUAGES[@]}"; do
    if [ "$EXT" = "$lang" ]; then
      local env="$lang"
      break
    fi
  done

  if [ -z "$env" ]; then
    echo "repl: Filetype '.${EXT}' not supported"
    exit 1
  fi

  local filepath="${TMP}/repl.${EXT}"

  # Call the appropriate module from `repl_modules`
  "repl_$env" edit "$filepath"

  repl_update_config "LAST_RUN=" "$EXT"


  if ! "$EDITOR" "$filepath" 2> /dev/null; then
    printf 'repl: Failed to run "%s". Check config file.\n' "$EDITOR"
    exit 1
  fi
}

repl_status() {
  if [ -n "$LAST_RUN" ] && [ -e "${TMP}/repl.${LAST_RUN}" ]; then
    echo "repl: status: currently in a $LAST_RUN repl"
  else
    echo "repl: No current repl"
  fi
}

repl_run() {
  for lang in "${LANGUAGES[@]}"; do
    if [ "$lang" = "$LAST_RUN" ]; then
      # Call the appropriate module from `repl_modules`
      "repl_$lang" "run" && \
      return 0
    fi
  done

  echo "repl: failed to run the ${LAST_RUN} repl"
  exit 1
}

main() {
  case "$COMMAND" in
  "")
    echo "repl: missing operand"
    echo "      Try 'repl js'"
    exit 1
    ;;
  run)
    repl_run
    ;;
  status)
    repl_status
    ;;
  config)
    if [ -n "$PARAM1" ] && [ -n "$PARAM2" ]; then
      repl_config
    else
      printf 'repl: (config) missing operand\n'
      printf '      e.g.: repl config editor vim\n'
      printf '                or\n'
      printf '            repl config editor /usr/bin/vim\n'
      exit 1
    fi
    ;;
  *)
    EXT="$COMMAND"
    repl_edit
    ;;
  esac
}

main

exit 0
